name: Release

on:
  push:
    tags:
      - "v*"
permissions:
  contents: write
  packages: write
  issues: write
  pull-requests: write

jobs:
  test-and-release:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        python-version: ["3.8", "3.9", "3.10", "3.11"]
        exclude:
          # Only build releases for macOS and Windows on Python 3.11
          - os: macos-latest
            python-version: "3.8"
          - os: macos-latest
            python-version: "3.9"
          - os: macos-latest
            python-version: "3.10"
          - os: windows-latest
            python-version: "3.8"
          - os: windows-latest
            python-version: "3.9"
          - os: windows-latest
            python-version: "3.10"

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install Chrome (Ubuntu)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y chromium-browser chromium-chromedriver

      - name: Install Chrome (macOS)
        if: matrix.os == 'macos-latest'
        run: |
          brew install --cask chromium chromedriver

      - name: Install Chrome (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          choco install chromium chromedriver

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e ".[dev]"

      - name: Run tests
        env:
          PYTHONUNBUFFERED: "1"
        run: |
          pytest -v --capture=no

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v5
        continue-on-error: true
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          slug: larsniet/web-button-watcher
          files: ./coverage.xml
          fail_ci_if_error: false

      # Only run release steps for macOS and Windows on Python 3.11
      - name: Verify Version
        if: matrix.python-version == '3.11' && (matrix.os == 'macos-latest' || matrix.os == 'windows-latest')
        id: verify_version
        shell: python
        run: |
          import os
          import sys
          import re
          from web_button_watcher import __version__

          # Get tag version from GitHub ref
          tag_version = os.environ['GITHUB_REF'].split('/')[-1][1:]  # Remove 'v' prefix
          print(f"Package version: {__version__}")
          print(f"Tag version: {tag_version}")

          # Set output for later steps
          with open(os.environ['GITHUB_OUTPUT'], 'a') as f:
              f.write(f"version={__version__}\n")

          if __version__ != tag_version:
              print(f"Error: Version mismatch! Tag version ({tag_version}) doesn't match package version ({__version__})")
              sys.exit(1)

          print("Version verification successful!")

      - name: Build application
        if: matrix.python-version == '3.11' && (matrix.os == 'macos-latest' || matrix.os == 'windows-latest')
        run: python build.py

      - name: Import Developer Certificate (macOS)
        if: matrix.os == 'macos-latest' && matrix.python-version == '3.11'
        env:
          BUILD_CERTIFICATE_BASE64: ${{ secrets.MACOS_CERTIFICATE }}
          P12_PASSWORD: ${{ secrets.MACOS_CERTIFICATE_PWD }}
          KEYCHAIN_PASSWORD: ${{ secrets.MACOS_KEYCHAIN_PASSWORD }}
        run: |
          # Create keychain
          security create-keychain -p "$KEYCHAIN_PASSWORD" build.keychain
          security default-keychain -s build.keychain
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" build.keychain

          # Import certificate
          echo $BUILD_CERTIFICATE_BASE64 | base64 --decode > certificate.p12
          security import certificate.p12 -k build.keychain -P "$P12_PASSWORD" -T /usr/bin/codesign
          security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k "$KEYCHAIN_PASSWORD" build.keychain

          # Remove certificate file
          rm certificate.p12

      - name: Sign and Notarize App (macOS)
        if: matrix.os == 'macos-latest' && matrix.python-version == '3.11'
        env:
          APPLE_ID: ${{ secrets.APPLE_ID }}
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
          APPLE_PASSWORD: ${{ secrets.APPLE_APP_SPECIFIC_PASSWORD }}
        run: |
          # Sign the app
          codesign --force --options runtime --sign "Developer ID Application: $APPLE_TEAM_ID" dist/WebButtonWatcher.app --deep

          # Create DMG
          hdiutil create -volname "WebButtonWatcher" -srcfolder dist/WebButtonWatcher.app -ov -format UDZO dist/WebButtonWatcher-macOS.dmg

          # Sign DMG
          codesign --force --sign "Developer ID Application: $APPLE_TEAM_ID" dist/WebButtonWatcher-macOS.dmg

          # Notarize
          xcrun notarytool submit dist/WebButtonWatcher-macOS.dmg --apple-id "$APPLE_ID" --password "$APPLE_PASSWORD" --team-id "$APPLE_TEAM_ID" --wait

          # Staple the notarization ticket
          xcrun stapler staple dist/WebButtonWatcher-macOS.dmg

      - name: Upload artifact
        if: matrix.python-version == '3.11' && (matrix.os == 'macos-latest' || matrix.os == 'windows-latest')
        uses: actions/upload-artifact@v4
        with:
          name: WebButtonWatcher-${{ matrix.os }}${{ matrix.os == 'windows-latest' && '.zip' || '.dmg' }}
          path: dist/WebButtonWatcher-${{ matrix.os }}${{ matrix.os == 'windows-latest' && '.zip' || '.dmg' }}

      - name: Create Release
        if: matrix.python-version == '3.11' && (matrix.os == 'macos-latest' || matrix.os == 'windows-latest')
        uses: softprops/action-gh-release@v2
        with:
          files: dist/WebButtonWatcher-${{ matrix.os }}${{ matrix.os == 'windows-latest' && '.zip' || '.dmg' }}
          name: Release ${{ github.ref_name }}
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
