name: Release

on:
  push:
    tags:
      - "v*"

permissions:
  contents: write
  checks: read # Required for waiting on check runs

jobs:
  wait-for-checks:
    runs-on: ubuntu-latest
    steps:
      - name: Wait for tests
        uses: lewagon/wait-on-check-action@v1.3.1
        with:
          ref: ${{ github.ref }}
          check-name: "test"
          repo-token: ${{ secrets.GITHUB_TOKEN }}
          wait-interval: 10

      - name: Wait for build
        uses: lewagon/wait-on-check-action@v1.3.1
        with:
          ref: ${{ github.ref }}
          check-name: "build"
          repo-token: ${{ secrets.GITHUB_TOKEN }}
          wait-interval: 10

  release:
    needs: wait-for-checks
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [macos-latest, windows-latest]

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e ".[dev]"

      - name: Verify Version
        id: verify_version
        shell: python
        run: |
          import os
          import sys
          from web_button_watcher import __version__

          tag_version = os.environ['GITHUB_REF'].split('/')[-1][1:]
          print(f"Package version: {__version__}")
          print(f"Tag version: {tag_version}")

          if __version__ != tag_version:
              print(f"Error: Version mismatch! Tag version ({tag_version}) doesn't match package version ({__version__})")
              sys.exit(1)

          print("Version verification successful!")

      - name: Build application
        run: python build.py

      - name: Import Developer Certificate (macOS)
        if: matrix.os == 'macos-latest'
        env:
          BUILD_CERTIFICATE_BASE64: ${{ secrets.MACOS_CERTIFICATE }}
          P12_PASSWORD: ${{ secrets.MACOS_CERTIFICATE_PWD }}
          KEYCHAIN_PASSWORD: ${{ secrets.MACOS_KEYCHAIN_PASSWORD }}
        run: |
          # Create keychain
          security create-keychain -p "$KEYCHAIN_PASSWORD" build.keychain
          security default-keychain -s build.keychain
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" build.keychain

          # Import certificate
          echo $BUILD_CERTIFICATE_BASE64 | base64 --decode > certificate.p12
          security import certificate.p12 -k build.keychain -P "$P12_PASSWORD" -T /usr/bin/codesign
          security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k "$KEYCHAIN_PASSWORD" build.keychain

          # Remove certificate file
          rm certificate.p12

      - name: Sign and Notarize App (macOS)
        if: matrix.os == 'macos-latest'
        env:
          APPLE_ID: ${{ secrets.APPLE_ID }}
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
          APPLE_PASSWORD: ${{ secrets.APPLE_APP_SPECIFIC_PASSWORD }}
        run: |
          # Find the certificate
          CERT_NAME=$(security find-identity -v -p codesigning build.keychain | grep "Developer ID Application" | head -1 | cut -d '"' -f 2)
          echo "Using certificate: $CERT_NAME"

          # Sign the app
          codesign --force --options runtime --sign "$CERT_NAME" dist/WebButtonWatcher.app --deep --verbose

          # Create DMG
          hdiutil create -volname "WebButtonWatcher" -srcfolder dist/WebButtonWatcher.app -ov -format UDZO dist/WebButtonWatcher-macOS.dmg

          # Sign DMG
          codesign --force --sign "$CERT_NAME" dist/WebButtonWatcher-macOS.dmg --verbose

          # Notarize
          xcrun notarytool submit dist/WebButtonWatcher-macOS.dmg --apple-id "$APPLE_ID" --password "$APPLE_PASSWORD" --team-id "$APPLE_TEAM_ID" --wait

          # Staple the notarization ticket
          xcrun stapler staple dist/WebButtonWatcher-macOS.dmg

      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          files: dist/WebButtonWatcher-${{ matrix.os }}${{ matrix.os == 'windows-latest' && '.zip' || '.dmg' }}
          name: Release ${{ github.ref_name }}
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
