name: Release

on:
  push:
    tags:
      # Only match tags like v1.0 or v2.1, not patch versions like v1.0.1
      - "v[0-9]+.[0-9]"
      - "v[0-9]+.[0-9].[0]"

permissions:
  contents: write
  packages: write
  issues: write
  pull-requests: write

jobs:
  # Wait for test workflow to complete
  wait-for-tests:
    runs-on: ubuntu-latest
    outputs:
      should_release: ${{ steps.check.outputs.should_release }}
    steps:
      - id: check
        run: |
          # Check if it's a major/minor version
          if [[ ! "${{ github.ref }}" =~ \.0\. ]]; then
            echo "should_release=true" >> $GITHUB_OUTPUT
          else
            echo "should_release=false" >> $GITHUB_OUTPUT
          fi

  build-and-release:
    needs: wait-for-tests
    if: needs.wait-for-tests.outputs.should_release == 'true'
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [macos-latest, windows-latest]
        include:
          - os: macos-latest
            artifact_name: WebButtonWatcher-macOS.dmg
            asset_name: WebButtonWatcher-macOS.dmg
          - os: windows-latest
            artifact_name: WebButtonWatcher-Windows.zip
            asset_name: WebButtonWatcher-Windows.zip

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e ".[dev]"

      - name: Verify Version
        id: verify_version
        shell: python
        run: |
          import os
          import sys
          import re
          from web_button_watcher import __version__

          # Get tag version from GitHub ref
          tag_version = os.environ['GITHUB_REF'].split('/')[-1][1:]  # Remove 'v' prefix
          print(f"Package version: {__version__}")
          print(f"Tag version: {tag_version}")

          # Set output for later steps
          with open(os.environ['GITHUB_OUTPUT'], 'a') as f:
              f.write(f"version={__version__}\n")

          if __version__ != tag_version:
              print(f"Error: Version mismatch! Tag version ({tag_version}) doesn't match package version ({__version__})")
              sys.exit(1)

          print("Version verification successful!")

      - name: Build application
        run: python build.py

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.artifact_name }}
          path: dist/${{ matrix.artifact_name }}

      - name: Create Release
        id: create_release
        uses: softprops/action-gh-release@v2
        if: success()
        with:
          files: dist/${{ matrix.artifact_name }}
          name: Release ${{ github.ref_name }}
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
